# dify_publisher.py (v14 - Ëá™Âä®‰øÆÂ§ç Markdown Êç¢Ë°åÊ†ºÂºè)
# Êú¨Âú∞ HTTP ÊúçÂä°ÔºöÊé•Êî∂ Dify WebhookÔºåËá™Âä®‰øÆÊ≠£ÊéíÁâàÔºåÂΩíÊ°£Âà∞ GitHub Pages ‰ªìÂ∫ìÔºåÂπ∂Êõ¥Êñ∞ manifest.json Âêé push

import http.server
import socketserver
import json
import os
import subprocess
from datetime import datetime, timezone, timedelta
import tempfile
import shutil
import re
from typing import Tuple

# ===== Áî®Êà∑ÈúÄÈÖçÁΩÆ =====
GITHUB_REPO_PATH = r"C:\Users\arashiduan\daily-site"  # Êú¨Âú∞‰ªìÂ∫ìÁªùÂØπË∑ØÂæÑ
PORT = 9397                                           # ÁõëÂê¨Á´ØÂè£
PUBLIC_DIR = "public"                                 # public ÁõÆÂΩïÂêç
WRITE_TO_ROOT = True                                  # True: ÂêåÊó∂ÂÜôÂÖ•‰ªìÂ∫ìÊ†πÁõÆÂΩï‰∏é public/

# ===== Êó∂Âå∫Ôºö‰ºòÂÖà ZoneInfo("Asia/Shanghai")ÔºõÂ§±Ë¥•ÂÖúÂ∫ï UTC+08:00 =====
try:
    from zoneinfo import ZoneInfo  # Python 3.9+
    try:
        CN_TZ = ZoneInfo("Asia/Shanghai")
        TZ_LABEL = "ZoneInfo(Asia/Shanghai)"
    except Exception:
        CN_TZ = timezone(timedelta(hours=8), name="Asia/Shanghai")
        TZ_LABEL = "FixedOffset(+08:00)"
except Exception:
    CN_TZ = timezone(timedelta(hours=8), name="Asia/Shanghai")
    TZ_LABEL = "FixedOffset(+08:00)"

# ===== manifest ÈªòËÆ§Ê®°Êùø =====
DEFAULT_MANIFEST = {
  "site": {
    "title": "AI / Ê∏∏Êàè Êó•Êä•",
    "description": "ÊØèÂ§© 10 ÂàÜÈíüÔºåË∑ü‰∏ä AI ‰∏éÊ∏∏ÊàèËøõÂ±ï",
    "baseUrl": ""
  },
  "categories": {
    "ai": "AI Êó•Êä•",
    "game": "Ê∏∏ÊàèÊó•Êä•"
  },
  "months": {
    "ai": {},
    "game": {}
  }
}


# ===== Ê†∏ÂøÉÊîπÂä®ÔºöÊñ∞Â¢û Markdown Ê†ºÂºèÂåñÂáΩÊï∞ =====
def format_markdown_spacing(md: str) -> str:
    """
    Ëá™Âä®‰øÆÂ§ç Dify ÂèØËÉΩÁîüÊàêÁöÑÂçïÊç¢Ë°å MarkdownÔºåÂ∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫Ê†áÂáÜÁöÑÂèåÊç¢Ë°å„ÄÇ
    - Êü•ÊâæÂêéÈù¢‰∏çÊòØÁâπÊÆäÂ≠óÁ¨¶ÔºàÂ¶ÇÂàóË°®È°π„ÄÅÊ†áÈ¢ò„ÄÅÂè¶‰∏ÄÊç¢Ë°åÁ¨¶ÔºâÁöÑÊç¢Ë°åÁ¨¶
    - Â∞ÜÂÖ∂ÊõøÊç¢‰∏∫‰∏§‰∏™Êç¢Ë°åÁ¨¶Ôºå‰ªéËÄåÂàõÂª∫Ê≠£Á°ÆÁöÑÊÆµËêΩ„ÄÇ
    """
    if not md:
        return ""
    # Ê≠£ÂàôË°®ËææÂºèÔºöÊü•Êâæ‰∏Ä‰∏™Êç¢Ë°åÁ¨¶ \nÔºåÊù°‰ª∂ÊòØÂÆÉÁöÑÂêéÈù¢‰∏çËÉΩÊòØ‰ª•‰∏ã‰ªª‰ΩïÂÜÖÂÆπÔºö
    # \n (Âè¶‰∏Ä‰∏™Êç¢Ë°åÁ¨¶), -, *, >, #, Êï∞Â≠ó. (Âç≥ \d\.)
    # ËøôÂèØ‰ª•‰øùÊä§Â∑≤ÁªèÂ≠òÂú®ÁöÑÊÆµËêΩÂàÜÈöîÂíåÂàóË°®/Ê†áÈ¢òÊ†ºÂºè„ÄÇ
    # ‰ΩøÁî®Ê≠£ÂêëÈ¢ÑÊü• (?=...) Êù•Ê£ÄÊü•ÔºåËÄå‰∏çÊòØÊ∂àËÄóÂ≠óÁ¨¶„ÄÇ
    formatted_md = re.sub(r'\n(?=[^\n\-*+># \d\.])', r'\n\n', md)
    return formatted_md


# ===== ÂàÜÁ±ªËßÑÂàô =====
def classify(content: str) -> str:
    return "game" if ("üéÆ" in content or "Ê∏∏ÊàèË°å‰∏öÈÄüÈÄí" in content) else "ai"


# ===== ÊèêÂèñÊ†áÈ¢ò/ÊëòË¶Å =====
def extract_title_summary(md: str) -> Tuple[str, str]:
    m = re.search(r'^\s*#\s+(.+)$', md, flags=re.M)
    title = m.group(1).strip() if m else (next((ln.strip() for ln in md.splitlines() if ln.strip()), "Êó•Êä•"))

    plain = re.sub(r'`{1,3}.*?`{1,3}', '', md, flags=re.S)
    plain = re.sub(r'!\[[^\]]*\]\([^)]+\)', '', plain)
    plain = re.sub(r'\[([^\]]+)\]\([^)]+\)', r'\1', plain)
    plain = re.sub(r'[#>*_`~\-]+', ' ', plain)
    plain = re.sub(r'\s+', ' ', plain).strip()
    short = (plain[:120] + '...') if len(plain) > 120 else plain
    return title, short


# ===== ÂéüÂ≠êÂÜôÊñá‰ª∂ =====
def atomic_write(path: str, data: str):
    dirpath = os.path.dirname(path) or "."
    if dirpath and dirpath != ".":
        os.makedirs(dirpath, exist_ok=True)
    with tempfile.NamedTemporaryFile('w', delete=False, encoding='utf-8', newline='\n', dir=dirpath) as tmp:
        tmp.write(data)
        tmp_path = tmp.name
    shutil.move(tmp_path, path)


# ===== manifest ÂàùÂßãÂåñ & Ë¶ÜÁõñÈÄªËæë =====
def load_or_init_manifest(manifest_path: str) -> dict:
    if not os.path.exists(manifest_path):
        print(f"‚ÑπÔ∏è manifest.json ‰∏çÂ≠òÂú®‰∫é {manifest_path}ÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§Ê®°ÊùøÂàõÂª∫„ÄÇ")
        return DEFAULT_MANIFEST.copy()
    try:
        with open(manifest_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        data.setdefault("site", DEFAULT_MANIFEST["site"])
        data.setdefault("categories", DEFAULT_MANIFEST["categories"])
        data.setdefault("months", {"ai": {}, "game": {}})
        data["months"].setdefault("ai", {})
        data["months"].setdefault("game", {})
        return data
    except Exception as e:
        print(f"‚ö†Ô∏è ËØªÂèñ manifest.json Â§±Ë¥• ({e})ÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§Ê®°Êùø„ÄÇ")
        return DEFAULT_MANIFEST.copy()


def upsert_manifest(manifest: dict, category: str, yyyy: str, mm: str, dd: str, title: str, summary: str):
    month_key = f"{yyyy}-{mm}"
    manifest["months"].setdefault(category, {})
    manifest["months"][category].setdefault(month_key, [])

    date_str = f"{yyyy}-{mm}-{dd}"
    url_path = f"{category}/{yyyy}/{mm}/{dd}.md"
    new_entry = {
        "date": date_str,
        "title": title,
        "summary": summary,
        "tags": [category.capitalize(), "Daily"],
        "url": url_path
    }
    entries = [e for e in manifest["months"][category][month_key] if e.get("date") != date_str]
    entries.insert(0, new_entry)
    manifest["months"][category][month_key] = entries
    return manifest


# ===== Git Êìç‰Ωú =====
def run_git(cmd, cwd):
    try:
        subprocess.run(["git", "config", "--global", "--add", "safe.directory", cwd], check=False, cwd=cwd)
    except Exception:
        pass
    return subprocess.run(cmd, check=True, cwd=cwd)


def git_commit_push(cwd: str, message: str):
    run_git(["git", "add", "."], cwd)
    rs = subprocess.run(["git", "diff", "--cached", "--quiet"], cwd=cwd)
    if rs.returncode == 0:
        print("‚ÑπÔ∏è Êó†Êñá‰ª∂ÂèòÊõ¥ÔºåË∑≥ËøáÊèê‰∫§„ÄÇ")
        return
    run_git(["git", "commit", "-m", message], cwd)
    run_git(["git", "push", "origin", "main"], cwd)


# ===== ‰∏ªÂ§ÑÁêÜÈÄªËæë =====
def process_dify_report(content: str):
    # ===== Ê†∏ÂøÉÊîπÂä®ÔºöÂú®Â§ÑÁêÜÂâçÂÖàË∞ÉÁî®Ê†ºÂºèÂåñÂáΩÊï∞ =====
    content = format_markdown_spacing(content)
    
    print(f"üöÄ Â§ÑÁêÜ Dify Êä•Âëä (Â∑≤Ëá™Âä®Ê†ºÂºèÂåñ)...ÔºàTZ={TZ_LABEL}Ôºâ")
    if not content or not content.strip():
        print("‚ùå ÂÜÖÂÆπ‰∏∫Á©∫ÔºåÂøΩÁï•„ÄÇ")
        return

    category = classify(content)
    print(f"‚úÖ ÂàÜÁ±ªÔºö{category}")

    now_cn = datetime.now(CN_TZ)
    yyyy, mm, dd = now_cn.strftime("%Y"), now_cn.strftime("%m"), now_cn.strftime("%d")
    date_str = f"{yyyy}-{mm}-{dd}"

    if not os.path.isdir(GITHUB_REPO_PATH):
        print(f"‚ùå ‰ªìÂ∫ìÁõÆÂΩï‰∏çÂ≠òÂú®Ôºö{GITHUB_REPO_PATH}")
        return

    os.chdir(GITHUB_REPO_PATH)
    print(f"üìÅ ‰ªìÂ∫ìÁõÆÂΩïÔºö{GITHUB_REPO_PATH}")

    md_rel = os.path.join(category, yyyy, mm, f"{dd}.md")
    atomic_write(os.path.join(PUBLIC_DIR, md_rel), content)
    if WRITE_TO_ROOT:
        atomic_write(md_rel, content)
    print(f"‚úÖ Markdown ÂÜôÂÖ•Ôºö{os.path.join(PUBLIC_DIR, md_rel)}" + (" & " + md_rel if WRITE_TO_ROOT else ""))

    manifest_root = os.path.join("manifest.json")
    manifest_pub  = os.path.join(PUBLIC_DIR, "manifest.json")
    manifest_load_path = manifest_root if (WRITE_TO_ROOT and os.path.exists(manifest_root)) else manifest_pub
    manifest = load_or_init_manifest(manifest_load_path)

    title, summary = extract_title_summary(content)
    manifest = upsert_manifest(manifest, category, yyyy, mm, dd, title, summary)
    manifest_json = json.dumps(manifest, ensure_ascii=False, indent=2)

    atomic_write(manifest_pub, manifest_json)
    if WRITE_TO_ROOT:
        atomic_write(manifest_root, manifest_json)
    print("‚úÖ manifest.json Â∑≤Êõ¥Êñ∞Ôºàpublic" + (" + root" if WRITE_TO_ROOT else "") + "Ôºâ„ÄÇ")

    commit_msg = f"docs(content): Update {category.upper()} daily report for {date_str}"
    print("‚è≥ Git Êèê‰∫§‰∏≠ ...")
    try:
        git_commit_push(GITHUB_REPO_PATH, commit_msg)
        print("üéâ Êé®ÈÄÅÂÆåÊàê„ÄÇ")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git Â§±Ë¥•Ôºö{e}")


# ===== Webhook Server (Êó†ÂèòÂä®) =====
class WebhookHandler(http.server.SimpleHTTPRequestHandler):
    def _read_body(self) -> bytes:
        te = (self.headers.get("Transfer-Encoding") or "").lower()
        if "chunked" in te:
            body = b""
            while True:
                line = self.rfile.readline().strip()
                if not line: break
                size = int(line, 16)
                if size == 0:
                    self.rfile.readline()
                    break
                body += self.rfile.read(size)
                self.rfile.readline()
            return body
        n = int(self.headers.get("Content-Length", "0"))
        return self.rfile.read(n)

    def do_POST(self):
        if self.path != "/webhook":
            self.send_response(404); self.end_headers(); return
        try:
            raw = self._read_body()
            body = raw.decode("utf-8", errors="replace").strip()

            try:
                dbg = (body[:200] + '...') if len(body) > 200 else body
                print(f"üîç ËØ∑Ê±Ç‰ΩìÈ¢ÑËßà: {dbg}")
            except Exception: pass

            content = None
            data = None
            try: data = json.loads(body)
            except Exception: data = None

            if isinstance(data, dict):
                content = data.get("content")
                if not content:
                    candidate = (data.get("text_input") or data.get("text") or data.get("final_report_markdown"))
                    if isinstance(candidate, dict):
                        content = (candidate.get("content") or candidate.get("text") or candidate.get("final_report_markdown"))
                    elif isinstance(candidate, str) and candidate:
                        try:
                            inner = json.loads(candidate)
                            if isinstance(inner, dict):
                                content = (inner.get("content") or inner.get("text") or inner.get("final_report_markdown"))
                            else: content = candidate
                        except Exception: content = candidate
            else:
                content = body

            if not content or not content.strip():
                raise ValueError("Êú™ÊâæÂà∞ÂÜÖÂÆπÔºàcontent/text_input/textÔºâÔºåÊàñ‰∏∫Á©∫„ÄÇ")

            from threading import Thread
            Thread(target=process_dify_report, args=(content,), daemon=True).start()

            self.send_response(200)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.end_headers()
            self.wfile.write(b'{"status":"ok"}')

        except Exception as e:
            self.send_response(400)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.end_headers()
            preview = body[:200] if 'body' in locals() else ""
            msg = json.dumps({"error": str(e), "preview": preview}, ensure_ascii=False).encode("utf-8")
            self.wfile.write(msg)


if __name__ == "__main__":
    print(f"--- Dify Publisher (v14) ---  Using TZ: {TZ_LABEL}")
    print(f"Listening: http://127.0.0.1:{PORT}/webhook")
    print(f"Set Dify Webhook URL to: http://host.docker.internal:{PORT}/webhook")
    with socketserver.TCPServer(("", PORT), WebhookHandler) as httpd:
        httpd.serve_forever()